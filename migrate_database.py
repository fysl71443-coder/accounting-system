#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุณูุฑูุจุช ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุธุงู ุงูุตูุงุญูุงุช
Database Migration Script for Permissions System
"""

import os
import sqlite3
from datetime import datetime

def backup_database():
    """ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    if os.path.exists('accounting.db'):
        backup_name = f'accounting_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
        import shutil
        shutil.copy2('accounting.db', backup_name)
        print(f"โ ุชู ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ: {backup_name}")
        return backup_name
    return None

def migrate_database():
    """ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฏุนู ูุธุงู ุงูุตูุงุญูุงุช"""
    
    # ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ
    backup_file = backup_database()
    
    try:
        # ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
        conn = sqlite3.connect('accounting.db')
        cursor = conn.cursor()
        
        print("๐ ุจุฏุก ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช...")
        
        # 1. ุฅูุดุงุก ุฌุฏูู ุงูุฃุฏูุงุฑ
        print("๐ ุฅูุดุงุก ุฌุฏูู ุงูุฃุฏูุงุฑ...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS roles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(80) UNIQUE NOT NULL,
                name_ar VARCHAR(80) NOT NULL,
                description TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                
                -- ุตูุงุญูุงุช ุงููุตูู ููุดุงุดุงุช
                can_access_sales BOOLEAN DEFAULT 0,
                can_access_purchases BOOLEAN DEFAULT 0,
                can_access_inventory BOOLEAN DEFAULT 0,
                can_access_reports BOOLEAN DEFAULT 0,
                can_access_employees BOOLEAN DEFAULT 0,
                can_access_costs BOOLEAN DEFAULT 0,
                can_access_taxes BOOLEAN DEFAULT 0,
                can_access_settings BOOLEAN DEFAULT 0,
                can_access_financial_statements BOOLEAN DEFAULT 0,
                can_access_payments BOOLEAN DEFAULT 0,
                can_access_expenses BOOLEAN DEFAULT 0,
                can_access_suppliers BOOLEAN DEFAULT 0,
                
                -- ุตูุงุญูุงุช ุงูุนูููุงุช CRUD
                can_create BOOLEAN DEFAULT 0,
                can_edit BOOLEAN DEFAULT 0,
                can_delete BOOLEAN DEFAULT 0,
                can_print BOOLEAN DEFAULT 0,
                can_export BOOLEAN DEFAULT 0
            )
        ''')
        
        # 2. ุงูุชุญูู ูู ูุฌูุฏ ุงูุฃุนูุฏุฉ ุงูุฌุฏูุฏุฉ ูู ุฌุฏูู ุงููุณุชุฎุฏููู
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]
        
        # ุฅุถุงูุฉ ุงูุฃุนูุฏุฉ ุงูููููุฏุฉ
        new_columns = [
            ('role_id', 'INTEGER'),
            ('old_role', 'VARCHAR(20) DEFAULT "user"'),
            ('login_attempts', 'INTEGER DEFAULT 0'),
            ('locked_until', 'DATETIME')
        ]
        
        for column_name, column_type in new_columns:
            if column_name not in columns:
                print(f"โ ุฅุถุงูุฉ ุนููุฏ {column_name} ูุฌุฏูู ุงููุณุชุฎุฏููู...")
                cursor.execute(f'ALTER TABLE users ADD COLUMN {column_name} {column_type}')
        
        # 3. ุฅุฏุฑุงุฌ ุงูุฃุฏูุงุฑ ุงูุงูุชุฑุงุถูุฉ
        print("๐ฅ ุฅุถุงูุฉ ุงูุฃุฏูุงุฑ ุงูุงูุชุฑุงุถูุฉ...")
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุฃุฏูุงุฑ
        cursor.execute("SELECT COUNT(*) FROM roles")
        roles_count = cursor.fetchone()[0]
        
        if roles_count == 0:
            default_roles = [
                # ูุดุฑู ุนุงู - ุฌููุน ุงูุตูุงุญูุงุช
                ('admin', 'ูุดุฑู ุนุงู', 'ุตูุงุญูุงุช ูุงููุฉ ูุฌููุน ุฃุฌุฒุงุก ุงููุธุงู', 1,
                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  # ุตูุงุญูุงุช ุงููุตูู
                 1, 1, 1, 1, 1),  # ุตูุงุญูุงุช ุงูุนูููุงุช
                
                # ูุญุงุณุจ - ุตูุงุญูุงุช ูุญุงุณุจูุฉ
                ('accountant', 'ูุญุงุณุจ', 'ุตูุงุญูุงุช ูุญุงุณุจูุฉ ููุงููุฉ', 1,
                 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1,  # ุตูุงุญูุงุช ุงููุตูู
                 1, 1, 0, 1, 1),  # ุตูุงุญูุงุช ุงูุนูููุงุช
                
                # ููุธู - ุตูุงุญูุงุช ูุญุฏูุฏุฉ
                ('employee', 'ููุธู', 'ุตูุงุญูุงุช ูุญุฏูุฏุฉ ููุนูููุงุช ุงูุฃุณุงุณูุฉ', 1,
                 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # ุตูุงุญูุงุช ุงููุตูู
                 1, 0, 0, 1, 0),  # ุตูุงุญูุงุช ุงูุนูููุงุช
                
                # ูุฑุงูุจ - ุนุฑุถ ููุท
                ('viewer', 'ูุฑุงูุจ', 'ุตูุงุญูุงุช ุนุฑุถ ููุท', 1,
                 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,  # ุตูุงุญูุงุช ุงููุตูู
                 0, 0, 0, 1, 0),  # ุตูุงุญูุงุช ุงูุนูููุงุช
                
                # ูุฏูุฑ - ุตูุงุญูุงุช ุฅุฏุงุฑูุฉ
                ('manager', 'ูุฏูุฑ', 'ุตูุงุญูุงุช ุฅุฏุงุฑูุฉ ูุน ูููุฏ ูุญุฏุฏุฉ', 1,
                 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,  # ุตูุงุญูุงุช ุงููุตูู
                 1, 1, 0, 1, 1)   # ุตูุงุญูุงุช ุงูุนูููุงุช
            ]
            
            cursor.executemany('''
                INSERT INTO roles (
                    name, name_ar, description, is_active,
                    can_access_sales, can_access_purchases, can_access_inventory, 
                    can_access_reports, can_access_employees, can_access_costs,
                    can_access_taxes, can_access_settings, can_access_financial_statements,
                    can_access_payments, can_access_expenses, can_access_suppliers,
                    can_create, can_edit, can_delete, can_print, can_export
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', default_roles)
        
        # 4. ุชุญุฏูุซ ุงููุณุชุฎุฏููู ุงูููุฌูุฏูู
        print("๐ ุชุญุฏูุซ ุงููุณุชุฎุฏููู ุงูููุฌูุฏูู...")
        
        # ูุณุฎ ุงูุฏูุฑ ุงููุฏูู ุฅูู old_role ุฅุฐุง ูู ููู ููุฌูุฏุงู
        cursor.execute("UPDATE users SET old_role = role WHERE old_role IS NULL")
        
        # ุฑุจุท ุงููุณุชุฎุฏููู ุจุงูุฃุฏูุงุฑ ุงูุฌุฏูุฏุฉ
        cursor.execute("SELECT id FROM roles WHERE name = 'admin'")
        admin_role_result = cursor.fetchone()
        if admin_role_result:
            admin_role_id = admin_role_result[0]
            cursor.execute("UPDATE users SET role_id = ? WHERE role = 'admin' OR old_role = 'admin'", (admin_role_id,))
        
        cursor.execute("SELECT id FROM roles WHERE name = 'employee'")
        employee_role_result = cursor.fetchone()
        if employee_role_result:
            employee_role_id = employee_role_result[0]
            cursor.execute("UPDATE users SET role_id = ? WHERE (role = 'user' OR old_role = 'user') AND role_id IS NULL", (employee_role_id,))
        
        # 5. ุฅูุดุงุก ุฌุฏูู ุฌูุณุงุช ุงููุณุชุฎุฏููู (ุงุฎุชูุงุฑู)
        print("๐ ุฅูุดุงุก ุฌุฏูู ุฌูุณุงุช ุงููุณุชุฎุฏููู...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                session_token VARCHAR(255) UNIQUE NOT NULL,
                ip_address VARCHAR(45),
                user_agent TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                expires_at DATETIME,
                is_active BOOLEAN DEFAULT 1,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        # ุญูุธ ุงูุชุบููุฑุงุช
        conn.commit()
        print("โ ุชู ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
        
        # ุนุฑุถ ุฅุญุตุงุฆูุงุช
        cursor.execute("SELECT COUNT(*) FROM roles")
        roles_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        
        print(f"๐ ุงูุฅุญุตุงุฆูุงุช:")
        print(f"   - ุนุฏุฏ ุงูุฃุฏูุงุฑ: {roles_count}")
        print(f"   - ุนุฏุฏ ุงููุณุชุฎุฏููู: {users_count}")
        
        return True
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        
        # ุงุณุชุนุงุฏุฉ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
        if backup_file and os.path.exists(backup_file):
            import shutil
            shutil.copy2(backup_file, 'accounting.db')
            print(f"๐ ุชู ุงุณุชุนุงุฏุฉ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: {backup_file}")
        
        return False
        
    finally:
        conn.close()

def verify_migration():
    """ุงูุชุญูู ูู ูุฌุงุญ ุงูุชุญุฏูุซ"""
    try:
        conn = sqlite3.connect('accounting.db')
        cursor = conn.cursor()
        
        print("๐ ุงูุชุญูู ูู ุงูุชุญุฏูุซ...")
        
        # ุงูุชุญูู ูู ุฌุฏูู ุงูุฃุฏูุงุฑ
        cursor.execute("SELECT name, name_ar FROM roles")
        roles = cursor.fetchall()
        print(f"โ ุงูุฃุฏูุงุฑ ุงููุชุงุญุฉ: {len(roles)}")
        for role in roles:
            print(f"   - {role[1]} ({role[0]})")
        
        # ุงูุชุญูู ูู ุงููุณุชุฎุฏููู
        cursor.execute("""
            SELECT u.username, u.full_name, r.name_ar 
            FROM users u 
            LEFT JOIN roles r ON u.role_id = r.id
        """)
        users = cursor.fetchall()
        print(f"โ ุงููุณุชุฎุฏููู: {len(users)}")
        for user in users:
            role_name = user[2] if user[2] else user[0]  # fallback to old role
            print(f"   - {user[1]} ({user[0]}) - {role_name}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุชุญูู: {e}")
        return False

if __name__ == '__main__':
    print("๐ ุจุฏุก ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุธุงู ุงูุตูุงุญูุงุช")
    print("=" * 50)

    # ุงูุชุญูู ูู ูุฌูุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
    if not os.path.exists('accounting.db'):
        print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ูุงุนุฏุฉ ุงูุจูุงูุงุช accounting.db")
        print("๐ ูุฑุฌู ุชุดุบูู ุงูุชุทุจูู ุฃููุงู ูุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        exit(1)

    if migrate_database():
        print("\n" + "=" * 50)
        verify_migration()
        print("\nโ ุชู ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
        print("๐ ููููู ุงูุขู ุฅุนุงุฏุฉ ุชุดุบูู ุงูุชุทุจูู")
    else:
        print("\nโ ูุดู ูู ุชุญุฏูุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        print("๐ ูุฑุฌู ูุฑุงุฌุนุฉ ุงูุฃุฎุทุงุก ุฃุนูุงู")
