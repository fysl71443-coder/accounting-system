#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
تطبيق المحاسبة الويب - Flask Web Accounting Application
"""

import os
import sqlite3
from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
from functools import wraps
import json

# إنشاء التطبيق
app = Flask(__name__)

# التكوين
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here-change-in-production')

# إعداد قاعدة البيانات
database_url = os.environ.get('DATABASE_URL')
if database_url and database_url.startswith('postgres://'):
    database_url = database_url.replace('postgres://', 'postgresql://', 1)

app.config['SQLALCHEMY_DATABASE_URI'] = database_url or 'sqlite:///accounting.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# إعداد قاعدة البيانات
db = SQLAlchemy(app)

# إعداد إدارة تسجيل الدخول
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = 'يرجى تسجيل الدخول للوصول إلى هذه الصفحة'

# نماذج قاعدة البيانات
# نموذج Role معطل مؤقتاً للتوافق مع قاعدة البيانات الحالية
# سيتم تفعيله بعد تحديث قاعدة البيانات

class User(UserMixin, db.Model):
    """نموذج المستخدم المحسن"""
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    full_name = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120))
    role = db.Column(db.String(20), default='user')  # الدور القديم
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def has_permission(self, permission):
        """التحقق من صلاحية معينة"""
        if not self.is_active:
            return False

        # المشرف له جميع الصلاحيات
        if self.role == 'admin':
            return True

        # صلاحيات أساسية للمستخدمين العاديين
        basic_permissions = [
            'can_access_sales', 'can_access_inventory',
            'can_create', 'can_print'
        ]

        if self.role == 'user' and permission in basic_permissions:
            return True

        return False

    def can_access(self, module):
        """التحقق من إمكانية الوصول لشاشة معينة"""
        if not self.is_active:
            return False

        # المشرف له وصول لكل شيء
        if self.role == 'admin':
            return True

        # المستخدمين العاديين لهم وصول محدود
        allowed_modules = ['sales', 'inventory']
        return module in allowed_modules

    def get_role_name(self):
        """الحصول على اسم الدور"""
        role_names = {
            'admin': 'مشرف عام',
            'user': 'موظف'
        }
        return role_names.get(self.role, self.role)

class Branch(db.Model):
    """نموذج الفرع"""
    __tablename__ = 'branches'
    
    id = db.Column(db.Integer, primary_key=True)
    branch_code = db.Column(db.String(10), unique=True, nullable=False)
    branch_name = db.Column(db.String(100), nullable=False)
    branch_name_en = db.Column(db.String(100), nullable=False)
    address = db.Column(db.Text)
    phone = db.Column(db.String(20))
    manager_name = db.Column(db.String(100))
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Product(db.Model):
    """نموذج المنتج"""
    __tablename__ = 'products'
    
    id = db.Column(db.Integer, primary_key=True)
    product_code = db.Column(db.String(50), unique=True, nullable=False)
    product_name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    unit_cost = db.Column(db.Float, default=0.0)
    selling_price = db.Column(db.Float, default=0.0)
    category = db.Column(db.String(100))
    unit_type = db.Column(db.String(20), default='قطعة')
    min_stock_level = db.Column(db.Integer, default=0)
    current_stock = db.Column(db.Integer, default=0)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class RawMaterial(db.Model):
    """نموذج المواد الخام"""
    __tablename__ = 'raw_materials'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    unit = db.Column(db.String(20), nullable=False)
    purchase_price = db.Column(db.Numeric(10, 3), nullable=False)
    current_stock = db.Column(db.Numeric(10, 3), default=0)
    min_stock_level = db.Column(db.Numeric(10, 3), default=5)
    supplier = db.Column(db.String(100))
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class ProductCost(db.Model):
    """نموذج تكلفة المنتج"""
    __tablename__ = 'product_costs'

    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)
    raw_material_id = db.Column(db.Integer, db.ForeignKey('raw_materials.id'), nullable=False)
    quantity_used = db.Column(db.Numeric(10, 3), nullable=False)
    unit_cost = db.Column(db.Numeric(10, 3), nullable=False)
    total_cost = db.Column(db.Numeric(10, 3), nullable=False)
    percentage = db.Column(db.Numeric(5, 2), default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # العلاقات
    raw_material = db.relationship('RawMaterial', backref='product_costs')

class Sale(db.Model):
    """نموذج فاتورة المبيعات"""
    __tablename__ = 'sales'
    
    id = db.Column(db.Integer, primary_key=True)
    invoice_number = db.Column(db.String(50), unique=True, nullable=False)
    branch_id = db.Column(db.Integer, db.ForeignKey('branches.id'))
    customer_name = db.Column(db.String(200))
    invoice_date = db.Column(db.Date, nullable=False)
    total_amount = db.Column(db.Float, default=0.0)
    tax_amount = db.Column(db.Float, default=0.0)
    final_amount = db.Column(db.Float, default=0.0)
    payment_method = db.Column(db.String(20))
    payment_status = db.Column(db.String(20), default='pending')
    notes = db.Column(db.Text)
    created_by = db.Column(db.Integer, db.ForeignKey('users.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # العلاقات
    branch = db.relationship('Branch', backref='sales')
    creator = db.relationship('User', backref='sales')
    items = db.relationship('SaleItem', backref='sale', cascade='all, delete-orphan')

class SaleItem(db.Model):
    """نموذج عنصر فاتورة المبيعات"""
    __tablename__ = 'sale_items'
    
    id = db.Column(db.Integer, primary_key=True)
    sale_id = db.Column(db.Integer, db.ForeignKey('sales.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('products.id'))
    product_name = db.Column(db.String(200), nullable=False)
    quantity = db.Column(db.Float, nullable=False)
    unit_price = db.Column(db.Float, nullable=False)
    total_price = db.Column(db.Float, nullable=False)
    tax_rate = db.Column(db.Float, default=15.0)
    tax_amount = db.Column(db.Float, default=0.0)
    
    # العلاقات
    product = db.relationship('Product', backref='sale_items')

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Decorator للتحقق من الصلاحيات
def require_permission(permission):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.is_authenticated:
                return redirect(url_for('login'))

            if not current_user.has_permission(permission):
                flash('ليس لديك صلاحية للوصول لهذه الصفحة', 'error')
                return redirect(url_for('dashboard'))

            return f(*args, **kwargs)
        return decorated_function
    return decorator

# Decorator للتحقق من الوصول للشاشات
def require_access(module):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.is_authenticated:
                return redirect(url_for('login'))

            if not current_user.can_access(module):
                flash(f'ليس لديك صلاحية للوصول لشاشة {module}', 'error')
                return redirect(url_for('dashboard'))

            return f(*args, **kwargs)
        return decorated_function
    return decorator

# Decorator للمشرف فقط
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated:
            return redirect(url_for('login'))

        if current_user.role != 'admin':
            flash('هذه الصفحة متاحة للمشرف فقط', 'error')
            return redirect(url_for('dashboard'))

        return f(*args, **kwargs)
    return decorated_function

# الصفحات الرئيسية
@app.route('/')
def index():
    """الصفحة الرئيسية"""
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    """صفحة تسجيل الدخول"""
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        language = request.form.get('language', 'ar')
        
        user = User.query.filter_by(username=username, is_active=True).first()
        
        if user and user.check_password(password):
            login_user(user)
            user.last_login = datetime.utcnow()
            db.session.commit()
            
            # حفظ اللغة في الجلسة
            session['language'] = language
            
            flash('تم تسجيل الدخول بنجاح', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('اسم المستخدم أو كلمة المرور غير صحيحة', 'error')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    """تسجيل الخروج"""
    logout_user()
    flash('تم تسجيل الخروج بنجاح', 'info')
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    """لوحة التحكم الرئيسية"""
    # إحصائيات سريعة
    today = datetime.now().date()
    
    # مبيعات اليوم
    daily_sales = db.session.query(db.func.sum(Sale.final_amount)).filter(
        Sale.invoice_date == today
    ).scalar() or 0
    
    # مبيعات الشهر
    month_start = today.replace(day=1)
    monthly_sales = db.session.query(db.func.sum(Sale.final_amount)).filter(
        Sale.invoice_date >= month_start
    ).scalar() or 0
    
    # عدد المنتجات
    total_products = Product.query.filter_by(is_active=True).count()
    
    # تنبيهات المخزون المنخفض
    low_stock_products = Product.query.filter(
        Product.current_stock <= Product.min_stock_level,
        Product.is_active == True
    ).all()
    
    # آخر المبيعات
    recent_sales = Sale.query.order_by(Sale.created_at.desc()).limit(5).all()
    
    return render_template('dashboard_unified.html',
                         daily_sales=daily_sales,
                         monthly_sales=monthly_sales,
                         total_products=total_products,
                         low_stock_products=low_stock_products,
                         recent_sales=recent_sales)

# تم حذف شاشة المنتجات القديمة - استخدم الشاشة الموحدة بدلاً منها

@app.route('/sales')
@login_required
@require_access('sales')
def sales():
    """صفحة المبيعات"""
    branch_id = request.args.get('branch_id')
    
    query = Sale.query
    if branch_id:
        query = query.filter_by(branch_id=branch_id)
    
    sales = query.order_by(Sale.created_at.desc()).all()
    branches = Branch.query.filter_by(is_active=True).all()
    
    return render_template('sales.html', sales=sales, branches=branches, selected_branch=branch_id)

# تم حذف شاشة فاتورة جديدة - يمكن إنشاء الفواتير من شاشة المبيعات مباشرة

@app.route('/raw_materials')
@login_required
def raw_materials():
    """صفحة إدارة المواد الخام"""
    return render_template('raw_materials.html')

@app.route('/product_cost')
@app.route('/product_cost/<int:product_id>')
@login_required
def product_cost(product_id=None):
    """صفحة حساب تكلفة المنتج"""
    product = None
    raw_materials = []

    # جلب بيانات المنتج إذا تم تمرير معرف المنتج
    if product_id:
        try:
            conn = sqlite3.connect('restaurant_accounting.db')
            cursor = conn.cursor()

            # جلب بيانات المنتج
            cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
            product_data = cursor.fetchone()

            if product_data:
                product = {
                    'id': product_data[0],
                    'product_name': product_data[1],
                    'product_name_en': product_data[2] if len(product_data) > 2 else '',
                    'category': product_data[3] if len(product_data) > 3 else '',
                    'selling_price': product_data[4] if len(product_data) > 4 else 0,
                    'product_code': f'P{product_data[0]:03d}',
                    'unit_cost': 0.00
                }

            conn.close()
        except (sqlite3.OperationalError, IndexError):
            # إذا لم يكن الجدول موجود أو حدث خطأ، استخدم بيانات تجريبية
            if product_id == 1:
                product = {
                    'id': 1,
                    'product_name': 'برياني دجاج',
                    'product_name_en': 'Chicken Biryani',
                    'category': 'وجبات رئيسية',
                    'selling_price': 25.00,
                    'product_code': 'P001',
                    'unit_cost': 18.50
                }

    # جلب قائمة المواد الخام (مع معالجة الأخطاء)
    try:
        conn = sqlite3.connect('restaurant_accounting.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, material_name, unit, purchase_price FROM raw_materials ORDER BY material_name")
        raw_materials_data = cursor.fetchall()

        for material in raw_materials_data:
            raw_materials.append({
                'id': material[0],
                'name': material[1],
                'unit': material[2],
                'price': material[3]
            })

        conn.close()
    except sqlite3.OperationalError:
        # إذا لم يكن الجدول موجود، استخدم بيانات تجريبية
        raw_materials = [
            {'id': 1, 'name': 'أرز بسمتي', 'unit': 'كيلو', 'price': 12.50},
            {'id': 2, 'name': 'دجاج طازج', 'unit': 'كيلو', 'price': 25.00},
            {'id': 3, 'name': 'بصل أحمر', 'unit': 'كيلو', 'price': 3.50},
            {'id': 4, 'name': 'طماطم', 'unit': 'كيلو', 'price': 4.00},
            {'id': 5, 'name': 'لبن زبادي', 'unit': 'كيلو', 'price': 8.00},
            {'id': 6, 'name': 'بهارات البرياني', 'unit': 'كيلو', 'price': 45.00},
            {'id': 7, 'name': 'زيت دوار الشمس', 'unit': 'لتر', 'price': 8.50},
            {'id': 8, 'name': 'ملح طعام', 'unit': 'كيلو', 'price': 2.00},
            {'id': 9, 'name': 'ثوم', 'unit': 'كيلو', 'price': 15.00},
            {'id': 10, 'name': 'زنجبيل', 'unit': 'كيلو', 'price': 20.00},
            {'id': 11, 'name': 'زعفران', 'unit': 'جرام', 'price': 0.50},
            {'id': 12, 'name': 'لوز مقشر', 'unit': 'كيلو', 'price': 35.00},
            {'id': 13, 'name': 'زبيب ذهبي', 'unit': 'كيلو', 'price': 18.00}
        ]

    # إضافة متغيرات إضافية للقالب
    cost_breakdown = []
    cost_history = []
    material_cost = 0.0

    return render_template('product_cost.html',
                         product=product,
                         product_id=product_id,
                         raw_materials=raw_materials,
                         cost_breakdown=cost_breakdown,
                         cost_history=cost_history,
                         material_cost=material_cost)

@app.route('/meal_cost_calculator')
@login_required
def meal_cost_calculator():
    """صفحة حساب تكلفة الوجبات المتقدمة"""

    # جلب قائمة الوجبات
    meals = [
        {'id': 1, 'name': 'برياني دجاج', 'servings': 4},
        {'id': 2, 'name': 'كبسة لحم', 'servings': 6},
        {'id': 3, 'name': 'مندي غنم', 'servings': 8},
        {'id': 4, 'name': 'مقلوبة دجاج', 'servings': 4},
        {'id': 5, 'name': 'أرز بخاري', 'servings': 5}
    ]

    # جلب قائمة المواد الخام
    raw_materials = [
        {'id': 1, 'name': 'أرز بسمتي', 'unit': 'كيلو', 'price': 12.50},
        {'id': 2, 'name': 'دجاج طازج', 'unit': 'كيلو', 'price': 25.00},
        {'id': 3, 'name': 'لحم غنم', 'unit': 'كيلو', 'price': 45.00},
        {'id': 4, 'name': 'بصل أحمر', 'unit': 'كيلو', 'price': 3.50},
        {'id': 5, 'name': 'طماطم', 'unit': 'كيلو', 'price': 4.00},
        {'id': 6, 'name': 'جزر', 'unit': 'كيلو', 'price': 2.50},
        {'id': 7, 'name': 'بازلاء', 'unit': 'كيلو', 'price': 6.00},
        {'id': 8, 'name': 'لبن زبادي', 'unit': 'كيلو', 'price': 8.00},
        {'id': 9, 'name': 'بهارات البرياني', 'unit': 'كيلو', 'price': 45.00},
        {'id': 10, 'name': 'بهارات الكبسة', 'unit': 'كيلو', 'price': 40.00},
        {'id': 11, 'name': 'زيت دوار الشمس', 'unit': 'لتر', 'price': 8.50},
        {'id': 12, 'name': 'سمن بلدي', 'unit': 'كيلو', 'price': 35.00},
        {'id': 13, 'name': 'ملح طعام', 'unit': 'كيلو', 'price': 2.00},
        {'id': 14, 'name': 'فلفل أسود', 'unit': 'كيلو', 'price': 25.00},
        {'id': 15, 'name': 'ثوم', 'unit': 'كيلو', 'price': 15.00},
        {'id': 16, 'name': 'زنجبيل', 'unit': 'كيلو', 'price': 20.00},
        {'id': 17, 'name': 'زعفران', 'unit': 'جرام', 'price': 0.50},
        {'id': 18, 'name': 'لوز مقشر', 'unit': 'كيلو', 'price': 35.00},
        {'id': 19, 'name': 'زبيب ذهبي', 'unit': 'كيلو', 'price': 18.00},
        {'id': 20, 'name': 'ماء ورد', 'unit': 'لتر', 'price': 12.00}
    ]

    return render_template('meal_cost_calculator.html',
                         meals=meals,
                         raw_materials=raw_materials)

@app.route('/api/ingredients', methods=['GET'])
@login_required
def get_ingredients():
    """API لجلب قائمة المكونات"""
    try:
        conn = sqlite3.connect('restaurant_accounting.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, material_name, unit, purchase_price FROM raw_materials ORDER BY material_name")
        ingredients_data = cursor.fetchall()

        ingredients = []
        for ingredient in ingredients_data:
            ingredients.append({
                'id': ingredient[0],
                'name': ingredient[1],
                'unit': ingredient[2],
                'price': ingredient[3]
            })

        conn.close()
        return jsonify({'success': True, 'ingredients': ingredients})
    except sqlite3.OperationalError:
        # Return default ingredients if table doesn't exist
        default_ingredients = [
            {'id': 1, 'name': 'أرز بسمتي', 'unit': 'كيلو', 'price': 12.50},
            {'id': 2, 'name': 'دجاج طازج', 'unit': 'كيلو', 'price': 25.00},
            {'id': 3, 'name': 'لحم غنم', 'unit': 'كيلو', 'price': 45.00},
            {'id': 4, 'name': 'بصل أحمر', 'unit': 'كيلو', 'price': 3.50},
            {'id': 5, 'name': 'طماطم', 'unit': 'كيلو', 'price': 4.00},
            {'id': 6, 'name': 'جزر', 'unit': 'كيلو', 'price': 2.50},
            {'id': 7, 'name': 'بازلاء', 'unit': 'كيلو', 'price': 6.00},
            {'id': 8, 'name': 'لبن زبادي', 'unit': 'كيلو', 'price': 8.00},
            {'id': 9, 'name': 'بهارات البرياني', 'unit': 'كيلو', 'price': 45.00},
            {'id': 10, 'name': 'بهارات الكبسة', 'unit': 'كيلو', 'price': 40.00},
            {'id': 11, 'name': 'زيت دوار الشمس', 'unit': 'لتر', 'price': 8.50},
            {'id': 12, 'name': 'سمن بلدي', 'unit': 'كيلو', 'price': 35.00},
            {'id': 13, 'name': 'ملح طعام', 'unit': 'كيلو', 'price': 2.00},
            {'id': 14, 'name': 'فلفل أسود', 'unit': 'كيلو', 'price': 25.00},
            {'id': 15, 'name': 'ثوم', 'unit': 'كيلو', 'price': 15.00},
            {'id': 16, 'name': 'زنجبيل', 'unit': 'كيلو', 'price': 20.00},
            {'id': 17, 'name': 'زعفران', 'unit': 'جرام', 'price': 0.50},
            {'id': 18, 'name': 'لوز مقشر', 'unit': 'كيلو', 'price': 35.00},
            {'id': 19, 'name': 'زبيب ذهبي', 'unit': 'كيلو', 'price': 18.00},
            {'id': 20, 'name': 'ماء ورد', 'unit': 'لتر', 'price': 12.00}
        ]
        return jsonify({'success': True, 'ingredients': default_ingredients})

@app.route('/api/ingredients', methods=['POST'])
@login_required
def add_ingredient():
    """API لإضافة مكون جديد"""
    data = request.get_json()

    if not data or not data.get('name') or not data.get('unit') or data.get('price') is None:
        return jsonify({'success': False, 'message': 'Missing required fields'})

    try:
        conn = sqlite3.connect('restaurant_accounting.db')
        cursor = conn.cursor()

        # Check if ingredient already exists
        cursor.execute("SELECT id FROM raw_materials WHERE material_name = ?", (data['name'],))
        if cursor.fetchone():
            conn.close()
            return jsonify({'success': False, 'message': 'Ingredient already exists'})

        # Insert new ingredient
        cursor.execute("""
            INSERT INTO raw_materials (material_name, unit, purchase_price, current_stock, min_stock_level)
            VALUES (?, ?, ?, 0, 10)
        """, (data['name'], data['unit'], data['price']))

        ingredient_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return jsonify({
            'success': True,
            'ingredient': {
                'id': ingredient_id,
                'name': data['name'],
                'unit': data['unit'],
                'price': data['price']
            }
        })
    except sqlite3.OperationalError:
        return jsonify({'success': False, 'message': 'Database error'})

@app.route('/api/ingredients/<int:ingredient_id>', methods=['PUT'])
@login_required
def update_ingredient(ingredient_id):
    """API لتحديث مكون موجود"""
    data = request.get_json()

    if not data:
        return jsonify({'success': False, 'message': 'No data provided'})

    try:
        conn = sqlite3.connect('restaurant_accounting.db')
        cursor = conn.cursor()

        # Build update query dynamically
        update_fields = []
        values = []

        if 'name' in data:
            update_fields.append('material_name = ?')
            values.append(data['name'])

        if 'unit' in data:
            update_fields.append('unit = ?')
            values.append(data['unit'])

        if 'price' in data:
            update_fields.append('purchase_price = ?')
            values.append(data['price'])

        if not update_fields:
            return jsonify({'success': False, 'message': 'No fields to update'})

        values.append(ingredient_id)
        query = f"UPDATE raw_materials SET {', '.join(update_fields)} WHERE id = ?"

        cursor.execute(query, values)
        conn.commit()
        conn.close()

        return jsonify({'success': True, 'message': 'Ingredient updated successfully'})
    except sqlite3.OperationalError:
        return jsonify({'success': False, 'message': 'Database error'})

@app.route('/api/ingredients/<int:ingredient_id>', methods=['DELETE'])
@login_required
def delete_ingredient(ingredient_id):
    """API لحذف مكون"""
    try:
        conn = sqlite3.connect('restaurant_accounting.db')
        cursor = conn.cursor()

        cursor.execute("DELETE FROM raw_materials WHERE id = ?", (ingredient_id,))
        conn.commit()
        conn.close()

        return jsonify({'success': True, 'message': 'Ingredient deleted successfully'})
    except sqlite3.OperationalError:
        return jsonify({'success': False, 'message': 'Database error'})

# API endpoints
@app.route('/change_language', methods=['POST'])
def change_language():
    """تغيير اللغة"""
    data = request.get_json()
    language = data.get('language', 'ar')
    session['language'] = language
    return jsonify({'status': 'success'})

# API endpoints
@app.route('/api/products')
@login_required
def api_products():
    """API للحصول على المنتجات"""
    products = Product.query.filter_by(is_active=True).all()
    return jsonify([{
        'id': p.id,
        'code': p.product_code,
        'name': p.product_name,
        'price': p.selling_price,
        'stock': p.current_stock
    } for p in products])

@app.route('/api/save_sale', methods=['POST'])
@login_required
def api_save_sale():
    """API لحفظ فاتورة مبيعات"""
    try:
        data = request.get_json()

        # إنشاء فاتورة جديدة
        sale = Sale(
            invoice_number=data['invoice_number'],
            branch_id=data['branch_id'],
            customer_name=data.get('customer_name'),
            invoice_date=datetime.strptime(data['invoice_date'], '%Y-%m-%d').date(),
            total_amount=data['total_amount'],
            tax_amount=data['tax_amount'],
            final_amount=data['final_amount'],
            payment_method=data['payment_method'],
            created_by=current_user.id
        )

        db.session.add(sale)
        db.session.flush()  # للحصول على معرف الفاتورة

        # إضافة عناصر الفاتورة وتحديث المخزون
        for item in data['items']:
            # التحقق من وجود المنتج وكفاية المخزون
            product_id = item.get('product_id')
            if product_id:
                product = Product.query.get(product_id)
                if product:
                    if product.current_stock < item['quantity']:
                        raise Exception(f'المخزون غير كافي للمنتج {product.product_name}. المتوفر: {product.current_stock}')

                    # تحديث المخزون
                    product.current_stock -= item['quantity']
                    product.updated_at = datetime.now()

            sale_item = SaleItem(
                sale_id=sale.id,
                product_id=product_id,
                product_name=item['product_name'],
                quantity=item['quantity'],
                unit_price=item['unit_price'],
                total_price=item['total_price'],
                tax_rate=item.get('tax_rate', 15.0),
                tax_amount=item.get('tax_amount', 0.0)
            )
            db.session.add(sale_item)

        db.session.commit()

        return jsonify({
            'status': 'success',
            'message': 'تم حفظ الفاتورة بنجاح',
            'sale_id': sale.id
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({
            'status': 'error',
            'message': f'خطأ في حفظ الفاتورة: {str(e)}'
        }), 400

@app.route('/api/generate_invoice_number')
@login_required
def api_generate_invoice_number():
    """API لتوليد رقم فاتورة جديد"""
    branch_id = request.args.get('branch_id', 1)
    today = datetime.now()

    # البحث عن آخر رقم فاتورة لهذا اليوم والفرع
    last_sale = Sale.query.filter(
        Sale.branch_id == branch_id,
        db.func.date(Sale.invoice_date) == today.date()
    ).order_by(Sale.id.desc()).first()

    sequence = 1
    if last_sale:
        # استخراج الرقم التسلسلي من آخر فاتورة
        try:
            last_sequence = int(last_sale.invoice_number.split('-')[-1])
            sequence = last_sequence + 1
        except:
            sequence = 1

    # الحصول على رمز الفرع
    branch = Branch.query.get(branch_id)
    branch_code = branch.branch_code if branch else 'XX'

    # تنسيق رقم الفاتورة: BRANCH-YYYYMMDD-XXXX
    invoice_number = f"{branch_code}-{today.strftime('%Y%m%d')}-{sequence:04d}"

    return jsonify({'invoice_number': invoice_number})

@app.route('/api/transfer_meal_to_product', methods=['POST'])
@login_required
def api_transfer_meal_to_product():
    """API لترحيل الوجبة من حساب التكاليف إلى منتج جاهز للبيع"""
    try:
        data = request.get_json()
        meal_id = data.get('meal_id')
        quantity_to_produce = data.get('quantity', 1)
        selling_price = data.get('selling_price')

        if not meal_id or not selling_price:
            return jsonify({
                'status': 'error',
                'message': 'يرجى إدخال جميع البيانات المطلوبة'
            }), 400

        # الاتصال بقاعدة بيانات حساب التكاليف
        import sqlite3
        costing_conn = sqlite3.connect('restaurant_costing.db')
        costing_cursor = costing_conn.cursor()

        # الحصول على بيانات الوجبة
        costing_cursor.execute('''
            SELECT name, servings, total_cost, cost_per_serving
            FROM meals WHERE id = ?
        ''', (meal_id,))
        meal_data = costing_cursor.fetchone()

        if not meal_data:
            costing_conn.close()
            return jsonify({
                'status': 'error',
                'message': 'الوجبة غير موجودة'
            }), 404

        meal_name, servings, total_cost, cost_per_serving = meal_data

        # الحصول على مكونات الوجبة
        costing_cursor.execute('''
            SELECT mi.quantity, i.name, i.unit
            FROM meal_ingredients mi
            JOIN ingredients i ON mi.ingredient_id = i.id
            WHERE mi.meal_id = ?
        ''', (meal_id,))
        ingredients = costing_cursor.fetchall()
        costing_conn.close()

        # إنشاء كود منتج تلقائي
        existing_product = Product.query.filter_by(product_name=meal_name).first()
        if existing_product:
            # تحديث المنتج الموجود
            existing_product.unit_cost = cost_per_serving
            existing_product.selling_price = selling_price
            existing_product.current_stock += quantity_to_produce * servings
            existing_product.updated_at = datetime.now()
            product = existing_product
        else:
            # إنشاء منتج جديد
            # توليد كود منتج
            last_product = Product.query.order_by(Product.id.desc()).first()
            next_id = (last_product.id + 1) if last_product else 1
            product_code = f"MEAL{next_id:03d}"

            product = Product(
                product_code=product_code,
                product_name=meal_name,
                description=f"وجبة محضرة - {meal_name}",
                unit_cost=cost_per_serving,
                selling_price=selling_price,
                category="وجبات جاهزة",
                unit_type="حصة",
                current_stock=quantity_to_produce * servings,
                min_stock_level=5,
                is_active=True,
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
            db.session.add(product)

        # حفظ التغييرات
        db.session.commit()

        return jsonify({
            'status': 'success',
            'message': f'تم ترحيل الوجبة "{meal_name}" كمنتج جاهز للبيع',
            'product_id': product.id,
            'product_code': product.product_code,
            'stock_added': quantity_to_produce * servings
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({
            'status': 'error',
            'message': f'خطأ في ترحيل المنتج: {str(e)}'
        }), 400

@app.route('/api/costing_meals')
@login_required
def api_costing_meals():
    """API للحصول على الوجبات من نظام حساب التكاليف"""
    try:
        import sqlite3
        conn = sqlite3.connect('restaurant_costing.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, name, servings, total_cost, cost_per_serving, updated_at
            FROM meals
            WHERE total_cost > 0
            ORDER BY updated_at DESC
        ''')

        meals = cursor.fetchall()
        conn.close()

        meals_data = []
        for meal in meals:
            meals_data.append({
                'id': meal[0],
                'name': meal[1],
                'servings': meal[2],
                'total_cost': meal[3],
                'cost_per_serving': meal[4],
                'updated_at': meal[5]
            })

        return jsonify({
            'status': 'success',
            'meals': meals_data
        })

    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'خطأ في تحميل الوجبات: {str(e)}'
        }), 400



@app.route('/api/raw_materials', methods=['GET', 'POST'])
@login_required
def api_raw_materials():
    """API للمواد الخام"""
    if request.method == 'GET':
        try:
            materials = RawMaterial.query.filter_by(is_active=True).all()
            materials_data = []

            for material in materials:
                materials_data.append({
                    'id': material.id,
                    'name': material.name,
                    'unit': material.unit,
                    'price': float(material.purchase_price),
                    'stock': float(material.current_stock),
                    'min_stock': float(material.min_stock_level),
                    'supplier': material.supplier or ''
                })

            return jsonify(materials_data)

        except Exception as e:
            return jsonify({'error': str(e)}), 500

    elif request.method == 'POST':
        try:
            data = request.get_json()

            material = RawMaterial(
                name=data['name'],
                unit=data['unit'],
                purchase_price=data['price'],
                current_stock=data.get('stock', 0),
                min_stock_level=data.get('min_stock', 5),
                supplier=data.get('supplier', ''),
                is_active=True
            )

            db.session.add(material)
            db.session.commit()

            return jsonify({'success': True, 'message': 'تم حفظ المادة الخام بنجاح'})

        except Exception as e:
            db.session.rollback()
            return jsonify({'success': False, 'message': str(e)}), 400

@app.route('/api/save_product_cost', methods=['POST'])
@login_required
def api_save_product_cost():
    """API لحفظ المنتج مع التكلفة التفصيلية"""
    try:
        data = request.get_json()

        # إنشاء المنتج
        # توليد كود منتج تلقائي
        last_product = Product.query.order_by(Product.id.desc()).first()
        next_id = (last_product.id + 1) if last_product else 1
        product_code = f"PROD{next_id:04d}"

        product = Product(
            product_code=product_code,
            product_name=data['name'],
            description=data.get('description', ''),
            unit_cost=data['cost_per_serving'],
            selling_price=data['suggested_price'],
            category=data.get('category', 'وجبات رئيسية'),
            unit_type='حصة',
            current_stock=data.get('servings', 1),
            min_stock_level=5,
            is_active=True,
            created_at=datetime.now(),
            updated_at=datetime.now()
        )

        db.session.add(product)
        db.session.flush()  # للحصول على product.id

        # حفظ تفاصيل التكلفة
        for ingredient in data['ingredients']:
            cost_detail = ProductCost(
                product_id=product.id,
                raw_material_id=ingredient['material_id'],
                quantity_used=ingredient['quantity'],
                unit_cost=ingredient['unit_price'],
                total_cost=ingredient['total_cost'],
                percentage=ingredient['percentage']
            )
            db.session.add(cost_detail)

        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'تم حفظ المنتج "{data["name"]}" بنجاح',
            'product_code': product_code,
            'product_id': product.id
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 400



# الصفحات الإضافية
@app.route('/unified_products')
@login_required
def unified_products():
    """الشاشة الموحدة لإدارة المنتجات والتكاليف"""
    return render_template('unified_products.html')

@app.route('/products')
@login_required
def products():
    """Products & Cost Calculation Screen"""
    try:
        # Get all active products
        products = Product.query.filter_by(is_active=True).all()

        # Get search parameter
        search = request.args.get('search', '')
        category = request.args.get('category', '')

        # Apply filters if provided
        if search:
            products = [p for p in products if search.lower() in p.product_name.lower() or search.lower() in p.product_code.lower()]

        if category:
            products = [p for p in products if p.category == category]

        # Get unique categories for filter dropdown
        categories = list(set([p.category for p in Product.query.filter_by(is_active=True).all() if p.category]))

        return render_template('products.html',
                             products=products,
                             search=search,
                             categories=categories)
    except Exception as e:
        flash(f'خطأ في تحميل المنتجات: {str(e)}', 'error')
        return render_template('products.html', products=[], search='', categories=[])

@app.route('/product_transfer')
@login_required
def product_transfer():
    """صفحة ترحيل المنتجات من حساب التكاليف إلى المبيعات"""
    return render_template('product_transfer.html')

@app.route('/suppliers')
@login_required
def suppliers():
    return render_template('suppliers.html')

@app.route('/customers')
@login_required
def customers():
    return render_template('customers.html')

@app.route('/inventory')
@login_required
def inventory():
    return render_template('inventory.html')

@app.route('/orders')
@login_required
def orders():
    return render_template('orders.html')

@app.route('/reports')
@login_required
def reports():
    return render_template('reports.html')

@app.route('/advanced_reports')
@login_required
def advanced_reports():
    """صفحة التقارير المالية المتقدمة"""

    # بيانات تجريبية للتقارير
    report_data = {
        'total_sales': 45000.00,
        'total_purchases': 20000.00,
        'total_expenses': 8000.00,
        'total_salaries': 12000.00,
        'total_vat': 6750.00,
        'net_profit': 5000.00
    }

    # فترات التقرير المتاحة
    period_types = [
        {'value': 'daily', 'name_ar': 'تقرير يومي', 'name_en': 'Daily Report'},
        {'value': 'weekly', 'name_ar': 'تقرير أسبوعي', 'name_en': 'Weekly Report'},
        {'value': 'monthly', 'name_ar': 'تقرير شهري', 'name_en': 'Monthly Report'},
        {'value': 'yearly', 'name_ar': 'تقرير سنوي', 'name_en': 'Yearly Report'},
        {'value': 'custom', 'name_ar': 'فترة مخصصة', 'name_en': 'Custom Period'}
    ]

    # أنواع التقارير
    report_types = [
        {'value': 'all', 'name_ar': 'تقرير شامل', 'name_en': 'Comprehensive Report'},
        {'value': 'sales', 'name_ar': 'المبيعات فقط', 'name_en': 'Sales Only'},
        {'value': 'purchases', 'name_ar': 'المشتريات فقط', 'name_en': 'Purchases Only'},
        {'value': 'expenses', 'name_ar': 'المصروفات فقط', 'name_en': 'Expenses Only'},
        {'value': 'salaries', 'name_ar': 'الرواتب فقط', 'name_en': 'Salaries Only'}
    ]

    # طرق الدفع
    payment_methods = [
        {'value': 'all', 'name_ar': 'جميع الطرق', 'name_en': 'All Methods'},
        {'value': 'CASH', 'name_ar': 'نقدي', 'name_en': 'Cash'},
        {'value': 'MADA', 'name_ar': 'مدى', 'name_en': 'MADA'},
        {'value': 'VISA', 'name_ar': 'فيزا', 'name_en': 'VISA'},
        {'value': 'MASTERCARD', 'name_ar': 'ماستركارد', 'name_en': 'MASTERCARD'},
        {'value': 'BANK', 'name_ar': 'تحويل بنكي', 'name_en': 'Bank Transfer'},
        {'value': 'CREDIT', 'name_ar': 'آجل', 'name_en': 'Credit'}
    ]

    return render_template('advanced_reports.html',
                         report_data=report_data,
                         period_types=period_types,
                         report_types=report_types,
                         payment_methods=payment_methods)

@app.route('/settings')
@login_required
def settings():
    return render_template('settings.html')

@app.route('/payments_dues')
@login_required
def payments_dues():
    """صفحة المدفوعات والمستحقات"""

    # بيانات تجريبية للمدفوعات والمستحقات
    summary_data = {
        'total_amount': 41200.00,
        'total_paid': 20200.00,
        'total_due': 21000.00,
        'unpaid_count': 4
    }

    # أنواع الحسابات
    account_types = [
        {'value': 'all', 'name_ar': 'جميع الحسابات', 'name_en': 'All Accounts'},
        {'value': 'suppliers', 'name_ar': 'الموردين', 'name_en': 'Suppliers'},
        {'value': 'customers', 'name_ar': 'العملاء', 'name_en': 'Customers'},
        {'value': 'employees', 'name_ar': 'الموظفين', 'name_en': 'Employees'},
        {'value': 'expenses', 'name_ar': 'مصاريف أخرى', 'name_en': 'Other Expenses'}
    ]

    # حالات السداد
    payment_statuses = [
        {'value': 'all', 'name_ar': 'جميع الحالات', 'name_en': 'All Status'},
        {'value': 'unpaid', 'name_ar': 'غير مدفوع', 'name_en': 'Unpaid'},
        {'value': 'partial', 'name_ar': 'مدفوع جزئياً', 'name_en': 'Partially Paid'},
        {'value': 'paid', 'name_ar': 'مدفوع بالكامل', 'name_en': 'Fully Paid'}
    ]

    # طرق الدفع
    payment_methods = [
        {'value': 'CASH', 'name_ar': 'نقدي', 'name_en': 'Cash'},
        {'value': 'MADA', 'name_ar': 'مدى', 'name_en': 'MADA'},
        {'value': 'VISA', 'name_ar': 'فيزا', 'name_en': 'VISA'},
        {'value': 'MASTERCARD', 'name_ar': 'ماستركارد', 'name_en': 'MASTERCARD'},
        {'value': 'BANK', 'name_ar': 'تحويل بنكي', 'name_en': 'Bank Transfer'},
        {'value': 'CHECK', 'name_ar': 'شيك', 'name_en': 'Check'}
    ]

    return render_template('payments_dues.html',
                         summary_data=summary_data,
                         account_types=account_types,
                         payment_statuses=payment_statuses,
                         payment_methods=payment_methods)

@app.route('/tax_management')
@login_required
def tax_management():
    """صفحة إدارة الضرائب"""

    # بيانات تجريبية للضرائب
    tax_statistics = {
        'total_collected': 15750.00,
        'vat_collected': 13500.00,
        'other_taxes': 2250.00,
        'invoices_count': 1250
    }

    tax_settings = {
        'vat_rate': 15.00,
        'vat_number': '300123456789003',
        'vat_enabled': True,
        'calculation_method': 'exclusive',
        'rounding': 'round',
        'show_breakdown': True
    }

    return render_template('tax_management.html',
                         tax_statistics=tax_statistics,
                         tax_settings=tax_settings)

def create_default_data():
    """إنشاء البيانات الافتراضية"""

    # إنشاء مستخدم المدير
    admin = User.query.filter_by(username='admin').first()
    if not admin:
        admin = User(
            username='admin',
            full_name='مدير النظام',
            email='admin@example.com',
            role='admin'
        )
        admin.set_password('admin123')
        db.session.add(admin)
        print("تم إنشاء المستخدم الافتراضي: admin / admin123")
    
    # إنشاء الفروع
    branches_data = [
        ('PI', 'PLACE INDIA', 'PLACE INDIA'),
        ('CT', 'CHINA TOWN', 'CHINA TOWN')
    ]
    
    for code, name_ar, name_en in branches_data:
        branch = Branch.query.filter_by(branch_code=code).first()
        if not branch:
            branch = Branch(
                branch_code=code,
                branch_name=name_ar,
                branch_name_en=name_en
            )
            db.session.add(branch)
    
    db.session.commit()

@app.route('/expenses')
@login_required
def expenses():
    """صفحة المصروفات"""
    return render_template('expenses.html')

# تم حذف شاشة حساب التكلفة القديمة - استخدم الشاشة الموحدة بدلاً منها

@app.route('/advanced_expenses')
@login_required
def advanced_expenses():
    """صفحة المصروفات المتقدمة"""

    # بيانات تجريبية للمصروفات
    summary_data = {
        'total_expenses': 30500.00,
        'paid_expenses': 24300.00,
        'pending_expenses': 6200.00,
        'expenses_count': 6
    }

    return render_template('advanced_expenses.html', summary_data=summary_data)

@app.route('/employee_payroll')
@login_required
def employee_payroll():
    """صفحة إدارة الموظفين والرواتب"""

    # بيانات تجريبية للملخص
    summary_data = {
        'total_employees': 5,
        'paid_salaries': 45000.00,
        'outstanding_salaries': 15000.00,
        'overdue_count': 2
    }

    return render_template('employee_payroll.html', summary_data=summary_data)

@app.route('/purchases')
@login_required
def purchases():
    """صفحة إدارة المشتريات"""

    # بيانات تجريبية للملخص
    summary_data = {
        'total_purchases': 6225.50,
        'paid_purchases': 3852.50,
        'pending_purchases': 2373.00,
        'invoices_count': 3
    }

    # الموردين
    suppliers = [
        {'id': 1, 'name_ar': 'شركة المواد الغذائية المتحدة', 'name_en': 'United Food Materials Company'},
        {'id': 2, 'name_ar': 'مؤسسة الخضار والفواكه', 'name_en': 'Vegetables & Fruits Est.'},
        {'id': 3, 'name_ar': 'شركة اللحوم الطازجة', 'name_en': 'Fresh Meat Company'},
        {'id': 4, 'name_ar': 'مصنع الألبان الذهبية', 'name_en': 'Golden Dairy Factory'},
        {'id': 5, 'name_ar': 'شركة التوابل والبهارات', 'name_en': 'Spices & Seasonings Co.'}
    ]

    # المنتجات
    products = [
        {'id': 1, 'name_ar': 'أرز بسمتي', 'name_en': 'Basmati Rice', 'unit_ar': 'كيس 25 كيلو', 'unit_en': '25kg Bag', 'cost_price': 85.00},
        {'id': 2, 'name_ar': 'زيت الطبخ', 'name_en': 'Cooking Oil', 'unit_ar': 'جالون 4 لتر', 'unit_en': '4L Gallon', 'cost_price': 32.50},
        {'id': 3, 'name_ar': 'دجاج طازج', 'name_en': 'Fresh Chicken', 'unit_ar': 'كيلو', 'unit_en': 'Kg', 'cost_price': 18.00},
        {'id': 4, 'name_ar': 'طماطم', 'name_en': 'Tomatoes', 'unit_ar': 'كيلو', 'unit_en': 'Kg', 'cost_price': 4.50},
        {'id': 5, 'name_ar': 'بصل', 'name_en': 'Onions', 'unit_ar': 'كيلو', 'unit_en': 'Kg', 'cost_price': 3.20},
        {'id': 6, 'name_ar': 'لحم بقري', 'name_en': 'Beef', 'unit_ar': 'كيلو', 'unit_en': 'Kg', 'cost_price': 45.00},
        {'id': 7, 'name_ar': 'حليب طازج', 'name_en': 'Fresh Milk', 'unit_ar': 'لتر', 'unit_en': 'Liter', 'cost_price': 6.50},
        {'id': 8, 'name_ar': 'دقيق أبيض', 'name_en': 'White Flour', 'unit_ar': 'كيس 50 كيلو', 'unit_en': '50kg Bag', 'cost_price': 95.00}
    ]

    return render_template('purchases.html',
                         summary_data=summary_data,
                         suppliers=suppliers,
                         products=products)

@app.route('/financial_statements')
@login_required
def financial_statements():
    """صفحة القوائم المالية"""

    # بيانات تجريبية للحسابات
    accounts_data = {
        'assets': {
            'cash': {'name_ar': 'النقدية', 'name_en': 'Cash', 'balance': 45000.00},
            'bank': {'name_ar': 'البنك', 'name_en': 'Bank', 'balance': 125000.00},
            'accounts_receivable': {'name_ar': 'حسابات العملاء', 'name_en': 'Accounts Receivable', 'balance': 35000.00},
            'inventory': {'name_ar': 'المخزون', 'name_en': 'Inventory', 'balance': 85000.00},
            'equipment': {'name_ar': 'المعدات', 'name_en': 'Equipment', 'balance': 150000.00},
            'furniture': {'name_ar': 'الأثاث', 'name_en': 'Furniture', 'balance': 25000.00}
        },
        'liabilities': {
            'accounts_payable': {'name_ar': 'حسابات الموردين', 'name_en': 'Accounts Payable', 'balance': 28000.00},
            'salaries_payable': {'name_ar': 'الرواتب المستحقة', 'name_en': 'Salaries Payable', 'balance': 15000.00},
            'vat_payable': {'name_ar': 'ضريبة القيمة المضافة المستحقة', 'name_en': 'VAT Payable', 'balance': 8500.00},
            'loans': {'name_ar': 'القروض', 'name_en': 'Loans', 'balance': 75000.00}
        },
        'equity': {
            'capital': {'name_ar': 'رأس المال', 'name_en': 'Capital', 'balance': 200000.00},
            'retained_earnings': {'name_ar': 'الأرباح المرحلة', 'name_en': 'Retained Earnings', 'balance': 89500.00}
        },
        'revenue': {
            'sales_revenue': {'name_ar': 'إيرادات المبيعات', 'name_en': 'Sales Revenue', 'balance': 180000.00},
            'other_income': {'name_ar': 'إيرادات أخرى', 'name_en': 'Other Income', 'balance': 5000.00}
        },
        'expenses': {
            'cost_of_goods': {'name_ar': 'تكلفة البضاعة المباعة', 'name_en': 'Cost of Goods Sold', 'balance': 95000.00},
            'salaries_expense': {'name_ar': 'مصروف الرواتب', 'name_en': 'Salaries Expense', 'balance': 45000.00},
            'rent_expense': {'name_ar': 'مصروف الإيجار', 'name_en': 'Rent Expense', 'balance': 18000.00},
            'utilities_expense': {'name_ar': 'مصروف الكهرباء والماء', 'name_en': 'Utilities Expense', 'balance': 8500.00},
            'marketing_expense': {'name_ar': 'مصروف التسويق', 'name_en': 'Marketing Expense', 'balance': 6000.00},
            'depreciation_expense': {'name_ar': 'مصروف الإهلاك', 'name_en': 'Depreciation Expense', 'balance': 12000.00}
        }
    }

    # حساب الإجماليات
    totals = {
        'total_assets': sum(account['balance'] for account in accounts_data['assets'].values()),
        'total_liabilities': sum(account['balance'] for account in accounts_data['liabilities'].values()),
        'total_equity': sum(account['balance'] for account in accounts_data['equity'].values()),
        'total_revenue': sum(account['balance'] for account in accounts_data['revenue'].values()),
        'total_expenses': sum(account['balance'] for account in accounts_data['expenses'].values())
    }

    # حساب صافي الربح
    totals['net_profit'] = totals['total_revenue'] - totals['total_expenses']
    totals['tax'] = totals['net_profit'] * 0.15 if totals['net_profit'] > 0 else 0
    totals['net_profit_after_tax'] = totals['net_profit'] - totals['tax']

    return render_template('financial_statements.html',
                         accounts_data=accounts_data,
                         totals=totals)

@app.route('/test_sidebar')
@login_required
def test_sidebar():
    """صفحة اختبار القائمة الجانبية"""
    return render_template('test_sidebar.html')

@app.route('/user_management')
@login_required
@admin_required
def user_management():
    """صفحة إدارة المستخدمين"""
    return render_template('user_management.html')

@app.route('/role_management')
@login_required
@admin_required
def role_management():
    """صفحة إدارة الأدوار والصلاحيات"""
    return render_template('role_management.html')

# API routes for payments
@app.route('/api/save_payment', methods=['POST'])
@login_required
def save_payment():
    """حفظ دفعة جديدة"""
    try:
        data = request.get_json()

        # التحقق من البيانات المطلوبة
        if not data.get('payment_amount') or float(data.get('payment_amount', 0)) <= 0:
            return jsonify({'success': False, 'message': 'يرجى إدخال مبلغ صحيح'})

        if not data.get('payment_date'):
            return jsonify({'success': False, 'message': 'يرجى اختيار تاريخ الدفع'})

        # إنشاء سجل الدفعة
        payment_data = {
            'payment_amount': float(data.get('payment_amount')),
            'payment_method': data.get('payment_method', 'CASH'),
            'payment_date': data.get('payment_date'),
            'payment_reference': data.get('payment_reference', ''),
            'payment_notes': data.get('payment_notes', ''),
            'selected_transactions': data.get('selected_transactions', []),
            'user_id': current_user.id,
            'created_at': datetime.now().isoformat()
        }

        # هنا يمكن حفظ البيانات في قاعدة البيانات
        # مؤقتاً سنحفظها في ملف JSON للاختبار
        payments_file = 'payments_log.json'
        payments_log = []

        if os.path.exists(payments_file):
            with open(payments_file, 'r', encoding='utf-8') as f:
                payments_log = json.load(f)

        # إضافة الدفعة الجديدة
        payment_data['id'] = len(payments_log) + 1
        payments_log.append(payment_data)

        # حفظ في الملف
        with open(payments_file, 'w', encoding='utf-8') as f:
            json.dump(payments_log, f, ensure_ascii=False, indent=2)

        return jsonify({
            'success': True,
            'message': 'تم حفظ الدفعة بنجاح',
            'payment_id': payment_data['id']
        })

    except Exception as e:
        return jsonify({'success': False, 'message': f'خطأ في حفظ الدفعة: {str(e)}'})

@app.route('/api/get_payments', methods=['GET'])
@login_required
def get_payments():
    """استرجاع قائمة الدفعات"""
    try:
        payments_file = 'payments_log.json'
        if os.path.exists(payments_file):
            with open(payments_file, 'r', encoding='utf-8') as f:
                payments_log = json.load(f)
            return jsonify({'success': True, 'payments': payments_log})
        else:
            return jsonify({'success': True, 'payments': []})
    except Exception as e:
        return jsonify({'success': False, 'message': f'خطأ في استرجاع الدفعات: {str(e)}'})

# API routes for expenses
@app.route('/api/save_expense', methods=['POST'])
@login_required
def save_expense():
    """حفظ مصروف جديد"""
    try:
        data = request.get_json()

        # التحقق من البيانات المطلوبة
        if not data.get('expense_type'):
            return jsonify({'success': False, 'message': 'يرجى اختيار نوع المصروف'})

        if not data.get('amount') or float(data.get('amount', 0)) <= 0:
            return jsonify({'success': False, 'message': 'يرجى إدخال مبلغ صحيح'})

        if not data.get('date'):
            return jsonify({'success': False, 'message': 'يرجى اختيار التاريخ'})

        if not data.get('description'):
            return jsonify({'success': False, 'message': 'يرجى إدخال وصف المصروف'})

        # إنشاء سجل المصروف
        expense_data = {
            'expense_type': data.get('expense_type'),
            'amount': float(data.get('amount')),
            'date': data.get('date'),
            'payment_method': data.get('payment_method', 'CASH'),
            'description': data.get('description'),
            'reference': data.get('reference', ''),
            'vendor': data.get('vendor', ''),
            'user_id': current_user.id,
            'created_at': datetime.now().isoformat()
        }

        # حفظ في ملف JSON للاختبار
        expenses_file = 'expenses_log.json'
        expenses_log = []

        if os.path.exists(expenses_file):
            with open(expenses_file, 'r', encoding='utf-8') as f:
                expenses_log = json.load(f)

        # إضافة المصروف الجديد
        expense_data['id'] = len(expenses_log) + 1
        expenses_log.append(expense_data)

        # حفظ في الملف
        with open(expenses_file, 'w', encoding='utf-8') as f:
            json.dump(expenses_log, f, ensure_ascii=False, indent=2)

        return jsonify({
            'success': True,
            'message': 'تم حفظ المصروف بنجاح',
            'expense_id': expense_data['id']
        })

    except Exception as e:
        return jsonify({'success': False, 'message': f'خطأ في حفظ المصروف: {str(e)}'})

@app.route('/api/get_expenses', methods=['GET'])
@login_required
def get_expenses():
    """استرجاع قائمة المصروفات"""
    try:
        expenses_file = 'expenses_log.json'
        if os.path.exists(expenses_file):
            with open(expenses_file, 'r', encoding='utf-8') as f:
                expenses_log = json.load(f)
            return jsonify({'success': True, 'expenses': expenses_log})
        else:
            return jsonify({'success': True, 'expenses': []})
    except Exception as e:
        return jsonify({'success': False, 'message': f'خطأ في استرجاع المصروفات: {str(e)}'})

# ============================================================================
# BUTTON SYSTEM API ROUTES
# ============================================================================

import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# SALES HANDLERS
@app.route('/api/sales/save', methods=['POST'])
@login_required
def sales_save_record():
    """Save sales record"""
    try:
        logger.info("🔵 Sales - Save Record button clicked")
        data = request.get_json()

        # Validate required fields
        required_fields = ['invoice_number', 'customer_name', 'total_amount']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'success': False, 'message': f'Missing required field: {field}'})

        # Create new sale record
        sale = Sale(
            invoice_number=data['invoice_number'],
            customer_name=data['customer_name'],
            invoice_date=datetime.strptime(data.get('invoice_date', datetime.now().strftime('%Y-%m-%d')), '%Y-%m-%d').date(),
            total_amount=float(data['total_amount']),
            tax_amount=float(data.get('tax_amount', 0)),
            final_amount=float(data.get('final_amount', data['total_amount'])),
            payment_method=data.get('payment_method', 'cash'),
            payment_status=data.get('payment_status', 'pending'),
            notes=data.get('notes', ''),
            created_by=current_user.id
        )

        db.session.add(sale)
        db.session.commit()

        logger.info(f"✅ Sales record saved successfully: {sale.invoice_number}")
        return jsonify({'success': True, 'message': 'Sales record saved successfully', 'id': sale.id})

    except Exception as e:
        logger.error(f"❌ Error saving sales record: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Error saving record: {str(e)}'})

@app.route('/api/sales/edit/<int:record_id>', methods=['PUT'])
@login_required
def sales_edit_record(record_id):
    """Edit sales record"""
    try:
        logger.info(f"🔵 Sales - Edit Record button clicked for ID: {record_id}")
        data = request.get_json()

        sale = Sale.query.get_or_404(record_id)

        # Update fields
        sale.customer_name = data.get('customer_name', sale.customer_name)
        sale.total_amount = float(data.get('total_amount', sale.total_amount))
        sale.tax_amount = float(data.get('tax_amount', sale.tax_amount))
        sale.final_amount = float(data.get('final_amount', sale.final_amount))
        sale.payment_method = data.get('payment_method', sale.payment_method)
        sale.payment_status = data.get('payment_status', sale.payment_status)
        sale.notes = data.get('notes', sale.notes)

        db.session.commit()

        logger.info(f"✅ Sales record updated successfully: {sale.invoice_number}")
        return jsonify({'success': True, 'message': 'Sales record updated successfully'})

    except Exception as e:
        logger.error(f"❌ Error updating sales record: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Error updating record: {str(e)}'})

@app.route('/api/sales/delete/<int:record_id>', methods=['DELETE'])
@login_required
def sales_delete_record(record_id):
    """Delete sales record"""
    try:
        logger.info(f"🔵 Sales - Delete Record button clicked for ID: {record_id}")

        sale = Sale.query.get_or_404(record_id)
        invoice_number = sale.invoice_number

        # Delete related sale items first
        SaleItem.query.filter_by(sale_id=record_id).delete()

        # Delete the sale record
        db.session.delete(sale)
        db.session.commit()

        logger.info(f"✅ Sales record deleted successfully: {invoice_number}")
        return jsonify({'success': True, 'message': 'Sales record deleted successfully'})

    except Exception as e:
        logger.error(f"❌ Error deleting sales record: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Error deleting record: {str(e)}'})

@app.route('/api/sales/preview/<int:record_id>')
@login_required
def sales_preview_record(record_id):
    """Preview sales record"""
    try:
        logger.info(f"🔵 Sales - Preview Record button clicked for ID: {record_id}")

        sale = Sale.query.get_or_404(record_id)
        sale_items = SaleItem.query.filter_by(sale_id=record_id).all()

        preview_data = {
            'sale': {
                'id': sale.id,
                'invoice_number': sale.invoice_number,
                'customer_name': sale.customer_name,
                'invoice_date': sale.invoice_date.strftime('%Y-%m-%d'),
                'total_amount': sale.total_amount,
                'tax_amount': sale.tax_amount,
                'final_amount': sale.final_amount,
                'payment_method': sale.payment_method,
                'payment_status': sale.payment_status,
                'notes': sale.notes
            },
            'items': [{
                'product_name': item.product_name,
                'quantity': item.quantity,
                'unit_price': item.unit_price,
                'total_price': item.total_price,
                'tax_amount': item.tax_amount
            } for item in sale_items]
        }

        logger.info(f"✅ Sales record preview generated: {sale.invoice_number}")
        return jsonify({'success': True, 'data': preview_data})

    except Exception as e:
        logger.error(f"❌ Error previewing sales record: {str(e)}")
        return jsonify({'success': False, 'message': f'Error previewing record: {str(e)}'})

@app.route('/api/sales/print/<int:record_id>')
@login_required
def sales_print_record(record_id):
    """Print sales record"""
    try:
        logger.info(f"🔵 Sales - Print Record button clicked for ID: {record_id}")

        sale = Sale.query.get_or_404(record_id)
        sale_items = SaleItem.query.filter_by(sale_id=record_id).all()

        logger.info(f"✅ Sales record print data prepared: {sale.invoice_number}")
        return jsonify({'success': True, 'print_url': f'/print/sales/{record_id}'})

    except Exception as e:
        logger.error(f"❌ Error preparing sales record for print: {str(e)}")
        return jsonify({'success': False, 'message': f'Error preparing print: {str(e)}'})

@app.route('/api/sales/select_invoice')
@login_required
def sales_select_invoice():
    """Get list of invoices for selection"""
    try:
        logger.info("🔵 Sales - Select Invoice button clicked")

        sales = Sale.query.order_by(Sale.created_at.desc()).limit(50).all()

        invoices_data = [{
            'id': sale.id,
            'invoice_number': sale.invoice_number,
            'customer_name': sale.customer_name,
            'invoice_date': sale.invoice_date.strftime('%Y-%m-%d'),
            'final_amount': sale.final_amount,
            'payment_status': sale.payment_status
        } for sale in sales]

        logger.info(f"✅ Retrieved {len(invoices_data)} invoices for selection")
        return jsonify({'success': True, 'invoices': invoices_data})

    except Exception as e:
        logger.error(f"❌ Error retrieving invoices: {str(e)}")
        return jsonify({'success': False, 'message': f'Error retrieving invoices: {str(e)}'})

@app.route('/api/sales/register_payment', methods=['POST'])
@login_required
def sales_register_payment():
    """Register payment for sales invoice"""
    try:
        logger.info("🔵 Sales - Register Payment button clicked")
        data = request.get_json()

        # Validate required fields
        required_fields = ['invoice_id', 'amount_paid', 'payment_method', 'payment_date']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'success': False, 'message': f'Missing required field: {field}'})

        sale = Sale.query.get_or_404(data['invoice_id'])

        # Update sale payment status
        if float(data['amount_paid']) >= sale.final_amount:
            sale.payment_status = 'paid'
        else:
            sale.payment_status = 'partial'

        db.session.commit()

        logger.info(f"✅ Payment registered successfully for invoice: {sale.invoice_number}")
        return jsonify({'success': True, 'message': 'Payment registered successfully'})

    except Exception as e:
        logger.error(f"❌ Error registering payment: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Error registering payment: {str(e)}'})

# PRODUCTS HANDLERS
@app.route('/api/products/save', methods=['POST'])
@login_required
def products_save_record():
    """Save product record"""
    try:
        logger.info("🔵 Products - Save Record button clicked")
        data = request.get_json()

        # Validate required fields
        required_fields = ['product_code', 'product_name']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'success': False, 'message': f'Missing required field: {field}'})

        # Create new product
        product = Product(
            product_code=data['product_code'],
            product_name=data['product_name'],
            description=data.get('description', ''),
            unit_cost=float(data.get('unit_cost', 0)),
            selling_price=float(data.get('selling_price', 0)),
            category=data.get('category', ''),
            unit_type=data.get('unit_type', 'قطعة'),
            min_stock_level=int(data.get('min_stock_level', 0)),
            current_stock=int(data.get('current_stock', 0))
        )

        db.session.add(product)
        db.session.commit()

        logger.info(f"✅ Product saved successfully: {product.product_code}")
        return jsonify({'success': True, 'message': 'Product saved successfully', 'id': product.id})

    except Exception as e:
        logger.error(f"❌ Error saving product: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Error saving product: {str(e)}'})

@app.route('/api/products/edit/<int:record_id>', methods=['PUT'])
@login_required
def products_edit_record(record_id):
    """Edit product record"""
    try:
        logger.info(f"🔵 Products - Edit Record button clicked for ID: {record_id}")
        data = request.get_json()

        product = Product.query.get_or_404(record_id)

        # Update fields
        product.product_name = data.get('product_name', product.product_name)
        product.description = data.get('description', product.description)
        product.unit_cost = float(data.get('unit_cost', product.unit_cost))
        product.selling_price = float(data.get('selling_price', product.selling_price))
        product.category = data.get('category', product.category)
        product.unit_type = data.get('unit_type', product.unit_type)
        product.min_stock_level = int(data.get('min_stock_level', product.min_stock_level))
        product.current_stock = int(data.get('current_stock', product.current_stock))
        product.updated_at = datetime.utcnow()

        db.session.commit()

        logger.info(f"✅ Product updated successfully: {product.product_code}")
        return jsonify({'success': True, 'message': 'Product updated successfully'})

    except Exception as e:
        logger.error(f"❌ Error updating product: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Error updating product: {str(e)}'})

@app.route('/api/products/delete/<int:record_id>', methods=['DELETE'])
@login_required
def products_delete_record(record_id):
    """Delete product record"""
    try:
        logger.info(f"🔵 Products - Delete Record button clicked for ID: {record_id}")

        product = Product.query.get_or_404(record_id)
        product_code = product.product_code

        # Soft delete - mark as inactive
        product.is_active = False
        db.session.commit()

        logger.info(f"✅ Product deleted successfully: {product_code}")
        return jsonify({'success': True, 'message': 'Product deleted successfully'})

    except Exception as e:
        logger.error(f"❌ Error deleting product: {str(e)}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Error deleting product: {str(e)}'})

@app.route('/api/products/search')
@login_required
def products_search_records():
    """Search products"""
    try:
        logger.info("🔵 Products - Search Records button clicked")

        search_term = request.args.get('q', '')
        page = int(request.args.get('page', 1))
        per_page = int(request.args.get('per_page', 20))

        query = Product.query.filter(Product.is_active == True)

        if search_term:
            query = query.filter(
                db.or_(
                    Product.product_code.contains(search_term),
                    Product.product_name.contains(search_term),
                    Product.description.contains(search_term)
                )
            )

        products = query.paginate(page=page, per_page=per_page, error_out=False)

        products_data = [{
            'id': p.id,
            'product_code': p.product_code,
            'product_name': p.product_name,
            'description': p.description,
            'unit_cost': p.unit_cost,
            'selling_price': p.selling_price,
            'current_stock': p.current_stock,
            'category': p.category
        } for p in products.items]

        logger.info(f"✅ Found {len(products_data)} products matching search: {search_term}")
        return jsonify({
            'success': True,
            'products': products_data,
            'total': products.total,
            'pages': products.pages,
            'current_page': page
        })

    except Exception as e:
        logger.error(f"❌ Error searching products: {str(e)}")
        return jsonify({'success': False, 'message': f'Error searching products: {str(e)}'})

@app.route('/api/products/print/<int:record_id>')
@login_required
def products_print_record(record_id):
    """Print product record"""
    try:
        logger.info(f"🔵 Products - Print Record button clicked for ID: {record_id}")

        product = Product.query.get_or_404(record_id)

        logger.info(f"✅ Product print data prepared: {product.product_code}")
        return jsonify({'success': True, 'print_url': f'/print/products/{record_id}'})

    except Exception as e:
        logger.error(f"❌ Error preparing product for print: {str(e)}")
        return jsonify({'success': False, 'message': f'Error preparing print: {str(e)}'})

# REPORTS HANDLERS
@app.route('/api/reports/preview', methods=['POST'])
@login_required
def reports_preview_report():
    """Preview report"""
    try:
        logger.info("🔵 Reports - Preview Report button clicked")
        data = request.get_json()

        report_type = data.get('report_type', 'sales_summary')
        date_from = data.get('date_from')
        date_to = data.get('date_to')

        # Generate report data based on type
        if report_type == 'sales_summary':
            # Sales summary report
            query = Sale.query
            if date_from:
                query = query.filter(Sale.invoice_date >= datetime.strptime(date_from, '%Y-%m-%d').date())
            if date_to:
                query = query.filter(Sale.invoice_date <= datetime.strptime(date_to, '%Y-%m-%d').date())

            sales = query.all()
            report_data = {
                'title': 'Sales Summary Report',
                'date_range': f"{date_from} to {date_to}",
                'total_sales': len(sales),
                'total_amount': sum(s.final_amount for s in sales),
                'sales': [{
                    'invoice_number': s.invoice_number,
                    'customer_name': s.customer_name,
                    'invoice_date': s.invoice_date.strftime('%Y-%m-%d'),
                    'final_amount': s.final_amount,
                    'payment_status': s.payment_status
                } for s in sales]
            }
        elif report_type == 'products_summary':
            # Products summary report
            products = Product.query.filter(Product.is_active == True).all()
            report_data = {
                'title': 'Products Summary Report',
                'total_products': len(products),
                'low_stock_products': len([p for p in products if p.current_stock <= p.min_stock_level]),
                'products': [{
                    'product_code': p.product_code,
                    'product_name': p.product_name,
                    'current_stock': p.current_stock,
                    'min_stock_level': p.min_stock_level,
                    'selling_price': p.selling_price,
                    'category': p.category
                } for p in products]
            }
        else:
            report_data = {'title': 'Unknown Report Type', 'data': []}

        logger.info(f"✅ Report preview generated: {report_type}")
        return jsonify({'success': True, 'report_data': report_data})

    except Exception as e:
        logger.error(f"❌ Error generating report preview: {str(e)}")
        return jsonify({'success': False, 'message': f'Error generating report: {str(e)}'})

@app.route('/api/reports/print', methods=['POST'])
@login_required
def reports_print_report():
    """Print report"""
    try:
        logger.info("🔵 Reports - Print Report button clicked")
        data = request.get_json()

        report_type = data.get('report_type', 'sales_summary')

        logger.info(f"✅ Report print prepared: {report_type}")
        return jsonify({'success': True, 'print_url': f'/print/reports/{report_type}'})

    except Exception as e:
        logger.error(f"❌ Error preparing report for print: {str(e)}")
        return jsonify({'success': False, 'message': f'Error preparing print: {str(e)}'})

@app.route('/api/reports/export', methods=['POST'])
@login_required
def reports_export_report():
    """Export report"""
    try:
        logger.info("🔵 Reports - Export Report button clicked")
        data = request.get_json()

        export_format = data.get('format', 'excel')  # excel, pdf, csv
        report_type = data.get('report_type', 'sales_summary')

        # Generate export file
        filename = f"report_{report_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{export_format}"

        logger.info(f"✅ Report exported successfully: {filename}")
        return jsonify({'success': True, 'filename': filename, 'download_url': f'/download/{filename}'})

    except Exception as e:
        logger.error(f"❌ Error exporting report: {str(e)}")
        return jsonify({'success': False, 'message': f'Error exporting report: {str(e)}'})

# GENERAL HANDLERS FOR OTHER SCREENS
@app.route('/api/<screen>/save', methods=['POST'])
@login_required
def general_save_record(screen):
    """General save handler for other screens"""
    try:
        logger.info(f"🔵 {screen.title()} - Save Record button clicked")
        data = request.get_json()

        # Log the save action
        logger.info(f"✅ {screen.title()} record save attempted")
        return jsonify({'success': True, 'message': f'{screen.title()} record saved successfully'})

    except Exception as e:
        logger.error(f"❌ Error saving {screen} record: {str(e)}")
        return jsonify({'success': False, 'message': f'Error saving {screen} record: {str(e)}'})

@app.route('/api/<screen>/edit/<int:record_id>', methods=['PUT'])
@login_required
def general_edit_record(screen, record_id):
    """General edit handler for other screens"""
    try:
        logger.info(f"🔵 {screen.title()} - Edit Record button clicked for ID: {record_id}")
        data = request.get_json()

        logger.info(f"✅ {screen.title()} record edit attempted")
        return jsonify({'success': True, 'message': f'{screen.title()} record updated successfully'})

    except Exception as e:
        logger.error(f"❌ Error updating {screen} record: {str(e)}")
        return jsonify({'success': False, 'message': f'Error updating {screen} record: {str(e)}'})

@app.route('/api/<screen>/delete/<int:record_id>', methods=['DELETE'])
@login_required
def general_delete_record(screen, record_id):
    """General delete handler for other screens"""
    try:
        logger.info(f"🔵 {screen.title()} - Delete Record button clicked for ID: {record_id}")

        logger.info(f"✅ {screen.title()} record delete attempted")
        return jsonify({'success': True, 'message': f'{screen.title()} record deleted successfully'})

    except Exception as e:
        logger.error(f"❌ Error deleting {screen} record: {str(e)}")
        return jsonify({'success': False, 'message': f'Error deleting {screen} record: {str(e)}'})

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        create_default_data()

    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
