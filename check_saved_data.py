#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ูุญุต ุงูุจูุงูุงุช ุงููุญููุธุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
Check Saved Data in Database
"""

import sqlite3
import os
from datetime import datetime

def check_purchases_data():
    """ูุญุต ุจูุงูุงุช ุงููุดุชุฑูุงุช ุงููุญููุธุฉ"""
    if not os.path.exists('accounting.db'):
        print("โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุบูุฑ ููุฌูุฏุฉ")
        return
    
    conn = sqlite3.connect('accounting.db')
    cursor = conn.cursor()
    
    try:
        print("๐ ูุญุต ุจูุงูุงุช ุงููุดุชุฑูุงุช:")
        print("=" * 50)
        
        # ูุญุต ุฌุฏูู ุงููุดุชุฑูุงุช
        cursor.execute("SELECT COUNT(*) FROM purchases")
        purchases_count = cursor.fetchone()[0]
        print(f"๐ ุนุฏุฏ ููุงุชูุฑ ุงููุดุชุฑูุงุช: {purchases_count}")
        
        if purchases_count > 0:
            print("\n๐ ุขุฎุฑ 5 ููุงุชูุฑ ูุดุชุฑูุงุช:")
            cursor.execute("""
                SELECT id, invoice_number, supplier_name, invoice_date, 
                       total_amount, final_amount, payment_status, created_at
                FROM purchases 
                ORDER BY created_at DESC 
                LIMIT 5
            """)
            
            purchases = cursor.fetchall()
            for purchase in purchases:
                id, invoice_num, supplier, date, total, final, status, created = purchase
                print(f"   ๐งพ {invoice_num}: {supplier} - {final} ุฑูุงู ({status}) - {created}")
        
        # ูุญุต ุฌุฏูู ุนูุงุตุฑ ุงููุดุชุฑูุงุช
        cursor.execute("SELECT COUNT(*) FROM purchase_items")
        items_count = cursor.fetchone()[0]
        print(f"\n๐ฆ ุนุฏุฏ ุนูุงุตุฑ ุงููุดุชุฑูุงุช: {items_count}")
        
        if items_count > 0:
            print("\n๐ ุขุฎุฑ 10 ุนูุงุตุฑ ูุดุชุฑูุงุช:")
            cursor.execute("""
                SELECT pi.id, pi.purchase_id, pi.product_name, pi.quantity, 
                       pi.unit_price, pi.total_price, p.invoice_number
                FROM purchase_items pi
                LEFT JOIN purchases p ON pi.purchase_id = p.id
                ORDER BY pi.id DESC 
                LIMIT 10
            """)
            
            items = cursor.fetchall()
            for item in items:
                id, purchase_id, product, qty, price, total, invoice = item
                print(f"   ๐ฆ {product}: {qty} ร {price} = {total} ุฑูุงู (ูุงุชูุฑุฉ: {invoice})")
        
        # ุฅุญุตุงุฆูุงุช ุฅุถุงููุฉ
        print(f"\n๐ ุฅุญุตุงุฆูุงุช:")
        
        # ุฅุฌูุงูู ุงููุจูุนุงุช
        cursor.execute("SELECT SUM(final_amount) FROM purchases WHERE payment_status != 'cancelled'")
        total_purchases = cursor.fetchone()[0] or 0
        print(f"   ๐ฐ ุฅุฌูุงูู ุงููุดุชุฑูุงุช: {total_purchases:.2f} ุฑูุงู")
        
        # ุญุณุจ ุญุงูุฉ ุงูุฏูุน
        cursor.execute("""
            SELECT payment_status, COUNT(*), SUM(final_amount) 
            FROM purchases 
            GROUP BY payment_status
        """)
        status_stats = cursor.fetchall()
        for status, count, amount in status_stats:
            print(f"   ๐ {status}: {count} ูุงุชูุฑุฉ - {amount:.2f} ุฑูุงู")
        
        # ุขุฎุฑ ูุงุชูุฑุฉ
        cursor.execute("""
            SELECT invoice_number, supplier_name, final_amount, created_at
            FROM purchases 
            ORDER BY created_at DESC 
            LIMIT 1
        """)
        last_purchase = cursor.fetchone()
        if last_purchase:
            invoice, supplier, amount, created = last_purchase
            print(f"\n๐ ุขุฎุฑ ูุงุชูุฑุฉ: {invoice} - {supplier} - {amount} ุฑูุงู - {created}")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ูุญุต ุงูุจูุงูุงุช: {e}")
    finally:
        conn.close()

def check_database_structure():
    """ูุญุต ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    if not os.path.exists('accounting.db'):
        print("โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุบูุฑ ููุฌูุฏุฉ")
        return
    
    conn = sqlite3.connect('accounting.db')
    cursor = conn.cursor()
    
    try:
        print("\n๐๏ธ ูุญุต ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช:")
        print("=" * 50)
        
        # ูุญุต ุฌุฏูู ุงููุดุชุฑูุงุช
        print("๐ ุฌุฏูู ุงููุดุชุฑูุงุช (purchases):")
        cursor.execute("PRAGMA table_info(purchases)")
        columns = cursor.fetchall()
        for col in columns:
            col_id, col_name, col_type, not_null, default_val, pk = col
            pk_str = " (PRIMARY KEY)" if pk else ""
            not_null_str = " NOT NULL" if not_null else ""
            default_str = f" DEFAULT {default_val}" if default_val else ""
            print(f"   - {col_name}: {col_type}{not_null_str}{default_str}{pk_str}")
        
        # ูุญุต ุฌุฏูู ุนูุงุตุฑ ุงููุดุชุฑูุงุช
        print(f"\n๐ฆ ุฌุฏูู ุนูุงุตุฑ ุงููุดุชุฑูุงุช (purchase_items):")
        cursor.execute("PRAGMA table_info(purchase_items)")
        columns = cursor.fetchall()
        for col in columns:
            col_id, col_name, col_type, not_null, default_val, pk = col
            pk_str = " (PRIMARY KEY)" if pk else ""
            not_null_str = " NOT NULL" if not_null else ""
            default_str = f" DEFAULT {default_val}" if default_val else ""
            print(f"   - {col_name}: {col_type}{not_null_str}{default_str}{pk_str}")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ูุญุต ุงููููู: {e}")
    finally:
        conn.close()

def test_insert_sample():
    """ุงุฎุชุจุงุฑ ุฅุฏุฑุงุฌ ุจูุงูุงุช ุชุฌุฑูุจูุฉ"""
    if not os.path.exists('accounting.db'):
        print("โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุบูุฑ ููุฌูุฏุฉ")
        return
    
    conn = sqlite3.connect('accounting.db')
    cursor = conn.cursor()
    
    try:
        print("\n๐งช ุงุฎุชุจุงุฑ ุฅุฏุฑุงุฌ ุจูุงูุงุช ุชุฌุฑูุจูุฉ:")
        print("=" * 50)
        
        # ุฅุฏุฑุงุฌ ูุงุชูุฑุฉ ุชุฌุฑูุจูุฉ
        test_invoice = f"TEST-{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        cursor.execute("""
            INSERT INTO purchases (
                invoice_number, supplier_name, invoice_date, 
                total_amount, tax_amount, final_amount, 
                payment_method, payment_status, notes, 
                branch_id, created_by, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            test_invoice, 'ููุฑุฏ ุชุฌุฑูุจู', datetime.now().date(),
            100.0, 15.0, 115.0,
            'ููุฏู', 'pending', 'ูุงุชูุฑุฉ ุชุฌุฑูุจูุฉ',
            1, 1, datetime.now()
        ))
        
        purchase_id = cursor.lastrowid
        print(f"โ ุชู ุฅุฏุฑุงุฌ ูุงุชูุฑุฉ ุชุฌุฑูุจูุฉ: {test_invoice} (ID: {purchase_id})")
        
        # ุฅุฏุฑุงุฌ ุนูุตุฑ ุชุฌุฑูุจู
        cursor.execute("""
            INSERT INTO purchase_items (
                purchase_id, product_name, quantity, 
                unit_price, total_price, created_at
            ) VALUES (?, ?, ?, ?, ?, ?)
        """, (
            purchase_id, 'ููุชุฌ ุชุฌุฑูุจู', 2.0,
            50.0, 100.0, datetime.now()
        ))
        
        print(f"โ ุชู ุฅุฏุฑุงุฌ ุนูุตุฑ ุชุฌุฑูุจู ูููุงุชูุฑุฉ")
        
        conn.commit()
        print("โ ุชู ุญูุธ ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ ุจูุฌุงุญ")
        
        # ุงูุชุญูู ูู ุงูุฅุฏุฑุงุฌ
        cursor.execute("SELECT COUNT(*) FROM purchases WHERE invoice_number = ?", (test_invoice,))
        if cursor.fetchone()[0] > 0:
            print("โ ุชู ุงูุชุญูู ูู ูุฌูุฏ ุงููุงุชูุฑุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        else:
            print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุงุชูุฑุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุฅุฏุฑุงุฌ: {e}")
        conn.rollback()
    finally:
        conn.close()

def main():
    """ุงููุธููุฉ ุงูุฑุฆูุณูุฉ"""
    print("=" * 60)
    print("๐ ูุญุต ุงูุจูุงูุงุช ุงููุญููุธุฉ - Check Saved Data")
    print("=" * 60)
    
    # ูุญุต ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ
    check_purchases_data()
    
    # ูุญุต ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    check_database_structure()
    
    # ุงุฎุชุจุงุฑ ุฅุฏุฑุงุฌ ุจูุงูุงุช
    test_insert_sample()
    
    print("\n" + "=" * 60)
    print("โ ุงูุชูู ูุญุต ุงูุจูุงูุงุช")
    print("โ Data check completed")
    print("=" * 60)

if __name__ == "__main__":
    main()
